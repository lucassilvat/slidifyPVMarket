cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
?n
n(cran)
n()
?n_distinct
?n
?n_distinct
submit()
pack_sum
play()
cran
nxt()
quantile(pack_sum$count,probs = 0.99)
top_counts <- filter(pack_sum,count > 679)
top_counts
Vie(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
Vie(result3)
View(result3)
submit()
submit()
submit()
submit()
swirl()
exit()
info()
bye()
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,count,-grade)
res
?separate
separate(res,col = sex_class, into=c("sex","class"))
submit()
students3
?gather
submit
submit()
?spread
submit()
?pivot
?pivot_wider
submit()
library(readr)
parse_numer("class5")
parse_number("class5")
submit()
students
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
rm()
rm(list=ls())
library(swirl)
sswirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("May 12,1975")
mdy("March 12,1975")
mdy("MarÃ§o 12,1975")
mdy("Mar 12,1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
class(dt2)
ymd(dt2)
update(this_moment,hours=8,mimutes=34,seconds=55)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
this_moment <- update(this_moment,hour=15,minutes=00)
this_moment <- update(this_moment,hour=15,minutes=00,seconds=0)
this_moment <- update(this_moment,hour=15,minutes=0,seconds=0)
this_moment <- update(this_moment,hours=15,minutes=0,seconds=0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart,hours=17,minutes=34,seconds=0)
depart <- update(depart,hours=17,minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive,"Asia/Hong_Kong")
arrive
las_time <- mdy("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time,arrive)
as.period(how_long)
stopwatch()
data(mtcars)
fit <- with(mtcars,lm(mpg ~ factor(cyl)+wt))
summary(fit)
fit2 <- with(mtcars,lm(mpg ~ factor(cyl)*wt))
summary(fit2)
fit3 <- with(mtcars,lm(mpg ~ wt*factor(cyl)))
summary(fit3)
rm(fit2,fit3)
fit2 <- with(mtcars,lm(mpg ~ factor(cyl)))
summary(fit2)
summary(fit)
fit3 <- with(mtcars,lm(mpg ~ wt*factor(cyl)))
anova(fit,fit3)
anova(fit3,fit)
?I
?wtcars
?mtcars
rm(list=ls())
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(caret)
install.packages("caret")
library(caret)
?createDataPartition
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
trainIndex
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
library(ggplot2)
qplot(y=CompressiveStrenght,data=concrete,color=.)
qplot(y=CompressiveStrength,data=concrete,color=.)
qplot(y=CompressiveStrength,data=concrete)
qplot(y=CompressiveStrength,data=concrete,color=Age)
qplot(y=CompressiveStrength,data=concrete,color=FlyAsh)
qplot(y=CompressiveStrength,data=concrete,color=Water)
qplot(y=CompressiveStrength,data=concrete,color=BlastFurnaceSlag)
qplot(y=CompressiveStrength,data=concrete,color=Superplasticizer)
qplot(y=CompressiveStrength,data=concrete,color=CoarseAggregate)
qplot(y=CompressiveStrength,data=concrete,color=FineAgregate)
qplot(y=CompressiveStrength,data=concrete,color=FineAggregate)
qplot(y=CompressiveStrength,data=concrete,color=Cement)
qplot(y=CompressiveStrength,data=concrete,color=Water)
qplot(x=Water,y=CompressiveStrength,data=concrete)
qplot(x=SuperPlasticizer,data=concrete)
qplot(x=Superplasticizer,data=concrete)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predIl <- grep("^IL",colnames(predictors),ignore.case=T)
predIl <- predictors[,grep("^IL",colnames(predictors),ignore.case=T)]
?preProcess
preProcess(predIl,method="pca")
summary(preProcess(predIl,method="pca"))
preProcess(predIl,method="pca",pcaComp = 0.9)
preProcess(predIl,method="pca",thresh = 0.9)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predIl <- predictors[,grep("^IL",colnames(predictors),ignore.case=T)]
data <- data.frame(diagnosis,predIl)
?train
train(diagnosis ~ ., data=data, method="glm")
train(x=predIl,y=diagnosis,method="glm")
library(e1071)
install.packages("e1071")
library(e1071)
train(diagnosis ~ ., data=data, method="glm")
t1 <- train(diagnosis ~ ., data=data, method="glm")
t2 <- train(x=predIl,y=diagnosis,method="glm")
identical(t1,t2)
t1
t2
set.seed(1213)
t1 <- train(diagnosis ~ ., data=data, method="glm")
set.seed(1213)
t2 <- train(x=predIl,y=diagnosis,method="glm")
identical(t1,t2)
t1
t2
t2 <- train(x=predIl,y=diagnosis,preProcess(predIl,method="pca",thresh = 0.8),method="glm")
preProcess <- preProcess(predIl,method="pca",thresh = 0.9)
t2 <- train(x=predIl,y=diagnosis,preProcess=preProcess,method="glm")
t2 <- train(diagnosis ~ ., data = data,preProcess(x=predIl,method="pca",thresh = 0.8),method="glm")
preProcess
summary(preProcess)
preProcess$mean
t2 <- train(diagnosis ~ ., data = data,preProcess="pca",method="glm")
t
t2
str(preProcess)
t2 <- train(diagnosis ~ ., data = data,preProcess="pca",method="glm",thresh=0.8)
t2 <- train(diagnosis ~ ., data = data,preProcess="pca",method="glm")
preP <- preProcess(predIl,method="pca",thresh=0.8)
PCAs <- predict(preP,predIl)
PCAs
t2 <- train(x=PCAs,y=diagnosis,method="glm")
t2
t1
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predIl <- predictors[,grep("^IL",colnames(predictors),ignore.case=T)]
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predIl <- training[,grep("^IL",colnames(training),ignore.case=T)]
training
train_IL <- cbind(training[,1],predIl)
train_IL
train_IL <- data.frame(cbind(training[,1],predIl))
train(diagnosis~.,data=train_IL,method="glm")
View(train_IL)
train_IL <- data.frame(training$diagnosis,predIl)
?data.frame
train_IL <- data.frame(training$diagnosis,predIl,col.names=c("diagnosis",colnames(predIl)))
colnames(predIl)
c("diagnosis",colnames(predIl))
names(train_IL) <- c("diagnosis,colnames(predIL")
names(train_IL) <- c("diagnosis",colnames(predIL))
names(train_IL) <- c("diagnosis",colnames(predIl))
t1 <- train(diagnosis~.,data=train_IL,method="glm")
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
t2 <- train(diagnosis~., data=train_IL, method="glm",preProcess = "pca",trControl = ctrl)
t1
t2
ctrl <- trainControl(preProcOptions = list(pcaComp = 7))
t2 <- train(diagnosis~., data=train_IL, method="glm",preProcess = "pca",trControl = ctrl)
t2
library(caret)
library(mlbench)
data(Sonar)
ctrl <- trainControl(preProcOptions = list(thresh = 0.95))
mod <- train(Class ~ .,
data = Sonar,
method = "pls",
trControl = ctrl)
?trainControl
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
t3 <- train(diagnosis~.,data=train_IL,preProcess = "pca",trControl = ctrl, method = "glm")
t3
t3 <- train(diagnosis~.,data=train_IL,preProcess = "pca",trControl = ctrl, method = "glm", verbose = T)
t3 <- train(diagnosis~.,data=train_IL,preProcess = "pca",trControl = ctrl, method = "glm")
t3
?train
?preProcess
preProcess(x = train_IL[,-c("diagnosis")],method="pca",thresh = 0.8)
preProcess(x = train_IL[,-1],method="pca",thresh = 0.8)
preProcess(x = train_IL,method="pca",thresh = 0.8)
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
ctrl <- trainControl(preProcOptions = list(thresh = 0.8,verbose=T))
t3 <- train(diagnosis~.,data=train_IL,preProcess = "pca",trControl = ctrl, method = "glm")
preProcess(x = train_IL,method="pca",thresh = 0.8,verbose=T)
t3
summary(t3)
summary(t1)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(predictors)
?subset
train_IL <- subset(training, select = grepl("^IL",colnames(training),ignore.case=T))
train_IL <- data.frame(training[,1],train_IL)
t1 <- train(diagnosis ~ ., model = "glm", data = train_IL)
t1 <- train(diagnosis ~ ., method = "glm", data = train_IL)
names(train_IL)[1]<- "diagnosis"
train_IL
t1 <- train(diagnosis ~ ., method = "glm", data = train_IL)
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
t2 <- train(diagnosis ~., method="glm", data = train_IL, preProcess = "pca",trControl = ctrl)
t2
t1
summary(t2)
PCAs <- predict(preProcess(train_IL[,-1],method="pca",thresh = 0.8))
PCAs <- predict(preProcess(train_IL[,-1],method="pca",thresh = 0.8),train_IL[,-1])
PCAs
mean(PCAs)
mean(PCAs$PC1)
summary(t2)
t3 <- train(PCAs,training$diagnosis,method="glm")
summart(t3)
summary(t3)
t3
confusionMatrix(testing$diagnosis,predict(t1,testing))
t2
summary(t2)
confusionMatrix(testing$diagnosis,predict(t2,testing))
confusionMatrix(testing$diagnosis,predict(t1,testing))
confusionMatrix(testing$diagnosis,predict(t2,testing))
confusionMatrix(testing$diagnosis,predict(t3,testing))
t3
rm(list=ls())
confusionMatrix(testing$diagnosis,predict(t2,testing))
source('~/.active-rstudio-document')
rm(list=ls())
RNGversion("3.0.0")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train_IL <- subset(training, select = grepl("^IL",colnames(training),ignore.case=T))
train_IL <- data.frame(training[,1],train_IL)
names(train_IL)[1]<- "diagnosis"
names(train_IL) <- c("diagnosis",colnames(predIl))
t1 <- train(diagnosis ~ ., method = "glm", data = train_IL)
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
t2 <- train(diagnosis ~., method="glm", data = train_IL, preProcess = "pca",trControl = ctrl)
confusionMatrix(testing$diagnosis,predict(t1,testing))
confusionMatrix(testing$diagnosis,predict(t2,testing))
rm(list=ls())
RNGversion("3.0.0")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train_IL <- subset(training, select = grepl("^IL",colnames(training),ignore.case=T))
train_IL <- data.frame(training[,1],train_IL)
names(train_IL)[1]<- "diagnosis"
t1 <- train(diagnosis ~ ., method = "glm", data = train_IL)
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
t2 <- train(diagnosis ~., method="glm", data = train_IL, preProcess = "pca",trControl = ctrl)
confusionMatrix(testing$diagnosis,predict(t1,testing))
confusionMatrix(testing$diagnosis,predict(t2,testing))
rm(lis=ls())
rm(list =ls())
library(ElemStatLearn); data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
install.packages(ElemStatLearn)
install.packages("ElemStatLearn")
data(ozone)
install.packages("ElemStatLearn")
Sys.which("python")
shiny::runApp('JHU_DS/myApp/PV-Brazil')
?textOutput
h3(textOutput("caption"))
h3(textOutput("text"))
h3(textOutput("text","a"))
runApp('JHU_DS/myApp/PV-Brazil')
runApp('JHU_DS/myApp/PV-Brazil')
runApp('JHU_DS/myApp/PV-Brazil')
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='lucassilvat', token='1DF636A35B5AD6B5E62E2228C50EB589', secret='3vqHV4yTvG8XI1Wyjtscc9zfSTMswWM/ETFhNduA')
deployApp()
runApp('JHU_DS/myApp/PV-Brazil')
runApp('JHU_DS/myApp/PV-Brazil')
library(slidify)
install.packages("slidify")
library(devtools])
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('slidify', 'ramnathv')
install_github("slidify", "ramnathv")
install.packages("stringi")
install_github("slidify", "ramnathv")
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs, force = TRUE)
pkgs <- 'ramnathv/slidify'
devtools::install_github(pkgs, force = TRUE)
uninstall.packages("glue")
library(slidifyLibraries)
library(slidify)
pkgs <- 'ramnathv/slidify'
devtools::install_github(pkgs, force = TRUE)
pkgs <- 'ramnathv/slidify'
devtools::install_github(pkgs, force = TRUE)
install.packages("glue")
devtools::install_github(pkgs, force = TRUE)
?slidify
author("slidifyPVMarket")
library(slidify)
library(slidifyLibraries)
author("slidifyPVMarket")
slidify("index.Rmd")
slidify("index.Rmd")
publish("lucassilvat","slidifyPVMarket")
?publish
debug(publish)
publish("lucassilvat","slidifyPVMarket")
debug(publish_deck)
debug(publish_github)
publish("slidifyPVMarket","lucassilvat")
publish("slidifyPVMarket","lucassilvat")
system("git commit -a -m \\"publishing deck\\"")
system("git commit -a -m "$message"")
